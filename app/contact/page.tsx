"use client";

import { useState } from "react";
import { MapPin, Clock, Phone, Mail, ChevronDown } from "lucide-react";

const faqs = [
  {
    question: "B·∫£o t√†ng c√≥ nh·ªØng khu v·ª±c tr∆∞ng b√†y n√†o?",
    answer:
      "B·∫£o t√†ng c√≥ c√°c khu v·ª±c tr∆∞ng b√†y g·ªìm: Khu v·ª±c l·ªãch s·ª≠, Khu ngh·ªá thu·∫≠t, Khu di s·∫£n vƒÉn h√≥a, v√† Khu tri·ªÉn l√£m t·∫°m th·ªùi.",
  },
  {
    question: "Gi·ªù m·ªü c·ª≠a c·ªßa b·∫£o t√†ng l√† khi n√†o?",
    answer: "B·∫£o t√†ng m·ªü c·ª≠a t·ª´ 8:00 - 17:00 h√†ng ng√†y, tr·ª´ th·ª© Hai h√†ng tu·∫ßn.",
  },
  {
    question: "C√≥ nh·ªØng hi·ªán v·∫≠t n·ªïi b·∫≠t n√†o trong b·∫£o t√†ng?",
    answer:
      "M·ªôt s·ªë hi·ªán v·∫≠t n·ªïi b·∫≠t g·ªìm: B·∫£n ƒë·ªì c·ªï, B·ª©c tranh qu√Ω hi·∫øm, ƒê·ªì t·∫°o t√°c t·ª´ th·ªùi phong ki·∫øn v√† T∆∞·ª£ng ƒëi√™u kh·∫Øc c·ªï.",
  },
  {
    question: "L·ªãch s·ª≠ h√¨nh th√†nh c·ªßa b·∫£o t√†ng?",
    answer:
      "B·∫£o t√†ng ƒë∆∞·ª£c th√†nh l·∫≠p v√†o nƒÉm 1980 v·ªõi m·ª•c ƒë√≠ch b·∫£o t·ªìn v√† ph√°t huy c√°c gi√° tr·ªã l·ªãch s·ª≠, vƒÉn h√≥a c·ªßa d√¢n t·ªôc.",
  },
  {
    question: "L√†m th·∫ø n√†o ƒë·ªÉ ƒë·∫øn b·∫£o t√†ng b·∫±ng ph∆∞∆°ng ti·ªán c√¥ng c·ªông?",
    answer:
      "B·∫°n c√≥ th·ªÉ ƒë·∫øn b·∫£o t√†ng b·∫±ng xe bu√Ωt s·ªë 10, 22, 36 ho·∫∑c ƒëi t√†u ƒëi·ªán ng·∫ßm ƒë·∫øn ga trung t√¢m v√† ƒëi b·ªô kho·∫£ng 10 ph√∫t.",
  },
];

function FAQAccordion() {
  const [openIndex, setOpenIndex] = useState<number | null>(null);

  const toggleFAQ = (index: number) => {
    setOpenIndex(openIndex === index ? null : index);
  };

  return (
    <div className="w-full bg-gray-50 p-4 rounded-lg shadow-md">
      <h2 className="text-lg font-bold text-gray-900 mb-2">
        C√ÇU H·ªéI TH∆Ø·ªúNG G·∫∂P
      </h2>
      <div className="divide-y divide-gray-200">
        {faqs.map((faq, index) => (
          <div key={index} className="py-4">
            <button
              onClick={() => toggleFAQ(index)}
              className="w-full text-left flex justify-between items-center text-base font-semibold text-gray-900 py-1"
            >
              {faq.question}
              <ChevronDown
                className={`w-5 h-5 transition-transform ${
                  openIndex === index ? "rotate-180" : ""
                }`}
              />
            </button>
            {openIndex === index && (
              <p className="mt-1 text-gray-700 text-sm">{faq.answer}</p>
            )}
          </div>
        ))}
      </div>
    </div>
  );
}

export default function ContactPage() {
  const [form, setForm] = useState({
    name: "",
    email: "",
    phone: "",
    subject: "",
    message: "",
  });

  const [errors, setErrors] = useState({});

  const validate = () => {
    let newErrors: any = {};
    if (!form.name.trim()) newErrors.name = "H·ªç v√† t√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng";
    if (!form.email.trim() || !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(form.email))
      newErrors.email = "Email kh√¥ng h·ª£p l·ªá";
    if (form.phone && !/^\d{10,11}$/.test(form.phone))
      newErrors.phone = "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá";
    if (!form.subject.trim()) newErrors.subject = "Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng";
    if (!form.message.trim())
      newErrors.message = "N·ªôi dung kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng";
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (validate()) {
      alert("G·ª≠i th√¥ng tin th√†nh c√¥ng!");
    }
  };

  return (
    <div className="bg-white">
      <div className="relative w-full h-72 md:h-96 lg:h-[500px] overflow-hidden">
        <img
          src="https://xdcs.cdnchinhphu.vn/446259493575335936/2024/11/6/bt-17308704367321003201191.jpg"
          alt="Di t√≠ch l·ªãch s·ª≠"
          className="w-full h-full object-cover"
        />
        <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center">
          <div className="text-center">
            <h1 className="text-xl md:text-2xl font-bold text-white">
              LI√äN H·ªÜ
            </h1>
            <h3 className="text-lg md:text-xl text-white mt-2">
              Ch√∫ng t√¥i lu√¥n s·∫µn s√†ng h·ªó tr·ª£ v√† gi·∫£i ƒë√°p m·ªçi th·∫Øc m·∫Øc c·ªßa qu√Ω
              kh√°ch!
            </h3>
          </div>
          {/* H·ªôp ch·ª©a c√°c n√∫t */}
          <div className="absolute bottom-20 w-full flex justify-center gap-x-16">
            {/* N√∫t b√™n tr√°i */}
            <button className="flex items-center gap-2 bg-orange-500 hover:bg-orange-600 text-white px-4 py-2 rounded-xl shadow-lg">
              üìû <span>(024) 3733 4464</span>
            </button>

            {/* N√∫t gi·ªØa */}
            <button className="flex items-center gap-2 bg-orange-500 hover:bg-orange-600 text-white px-4 py-2 rounded-xl shadow-lg">
              üìß <span>info@btlsqsvn.vn</span>
            </button>

            {/* N√∫t b√™n ph·∫£i */}
            <button className="flex items-center gap-2 bg-orange-500 hover:bg-orange-600 text-white px-4 py-2 rounded-xl shadow-lg">
              üìç <span>28A ƒêi·ªán Bi√™n Ph·ªß, Ba ƒê√¨nh, H√† N·ªôi</span>
            </button>
          </div>
        </div>
      </div>
      <div className="max-w-7xl mx-auto px-4 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          <FAQAccordion />
          <div className="bg-white p-4 rounded-lg shadow-md">
            <h2 className="text-lg font-bold text-gray-900 mb-2">
              G·ª¨I TH√îNG TIN LI√äN H·ªÜ
            </h2>
            <form className="space-y-3" onSubmit={handleSubmit}>
              {Object.entries(form).map(([key, value]) => (
                <div key={key}>
                  <label className="block text-sm font-medium text-gray-700">
                    {key === "message"
                      ? "N·ªôi dung"
                      : key.charAt(0).toUpperCase() + key.slice(1)}
                    {key !== "phone" && (
                      <span className="text-red-500"> *</span>
                    )}
                  </label>
                  {key === "message" ? (
                    <textarea
                      className="w-full h-16 border rounded-lg p-2"
                      value={value}
                      onChange={(e) =>
                        setForm({ ...form, [key]: e.target.value })
                      }
                    />
                  ) : (
                    <input
                      type={
                        key === "email"
                          ? "email"
                          : key === "phone"
                          ? "tel"
                          : "text"
                      }
                      className="w-full h-10 border rounded-lg p-2"
                      value={value}
                      onChange={(e) =>
                        setForm({ ...form, [key]: e.target.value })
                      }
                    />
                  )}
                  {errors[key as keyof typeof errors] && (
                    <p className="text-red-500 text-xs">
                      {errors[key as keyof typeof errors]}
                    </p>
                  )}
                </div>
              ))}
              <button className="w-full h-10 bg-blue-600 text-white font-bold rounded-lg hover:bg-blue-700">
                G·ª≠i th√¥ng tin
              </button>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
}
